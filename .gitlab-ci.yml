# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR/wsp

stages:
  - build
  - test

build:alltests_pi:
  tags:
  - raspberrypi
  
  only:
   - schedules
   - merge_requests
  
  stage: build
  script:
    - rm -f $CI_PROJECT_DIR/test/unit/bin/*
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - cmake --build . --target test_all_unit
  artifacts:
    paths:
    - $CI_PROJECT_DIR/build/test/test_all_unit
    - $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src
    - $CI_PROJECT_DIR/test/unit/bin

test:alltests_pi:
  tags:
  - raspberrypi

  only:
   - schedules
   - merge_requests
  
  stage: test
  script:
      - cd test/unit/bin
      - sudo ./test_all_unit --gtest_output="xml:report.xml"
      - sudo chown -R gitlab-runner:gitlab-runner $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src/
      - mkdir -p coverage
      - lcov --capture --directory $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src --output-file coverage/coverage.info
      - genhtml coverage/coverage.info --output-directory coverage
  dependencies: 
    - build:alltests_pi
  artifacts:
    paths:
      - $CI_PROJECT_DIR/build/test/coverage
    reports:
      junit: $CI_PROJECT_DIR/test/unit/bin/report.xml
  after_script:
    - sudo chown -R gitlab-runner:gitlab-runner $CI_PROJECT_DIR/build
    - sudo rm -f $CI_PROJECT_DIR/test/unit/bin/test_all_unit



build:alltests_quick:
  tags:
  - crossplatform
  
  except:
   - schedules
   - merge_requests
  
  stage: build
  script:
    - rm -f $CI_PROJECT_DIR/test/unit/bin/*
    - mkdir build
    - cd build
    - cmake -DCMAKE_TOOLCHAIN_FILE=rasp/toolchain-rasppi.cmake ..
    - cmake --build . --target test_all_unit
  artifacts:
    paths:
    - $CI_PROJECT_DIR/build/test/test_all_unit
    - $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src
    - $CI_PROJECT_DIR/test/unit/bin

test:alltests_quick:
  tags:
  - raspberrypi

  except:
   - schedules
   - merge_requests
  
  stage: test
  script:
    - cd test/unit/bin
    - sudo ./test_all_unit --gtest_output="xml:report.xml"
  dependencies: 
    - build:alltests_quick
  artifacts:
    reports:
      junit: $CI_PROJECT_DIR/test/unit/bin/report.xml
  after_script:
    - sudo chown -R gitlab-runner:gitlab-runner $CI_PROJECT_DIR/build
    - sudo rm -f $CI_PROJECT_DIR/test/unit/bin/test_all_unit


#build:alltests_quick_cov:
#  tags:
#    - crossplatform
#
#  only:
#    - web
#
#  stage: build
#  script:
#    - mkdir build
#    - cd build
#    - cmake -DCMAKE_TOOLCHAIN_FILE=rasp/toolchain-rasppi_coverage.cmake ..
#    - cmake --build . --target test_all_unit
#  artifacts:
#    paths:
#      - $CI_PROJECT_DIR/build/test/test_all_unit
#      - $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src
#
#test:alltests_quick_cov:
#  tags:
#    - raspberrypi
#
#  except:
#    - schedules
#
#  stage: test
#  script:
#    - cd build/test
#    - sudo ./test_all_unit --gtest_output="xml:report.xml"
#    - sudo chown -R gitlab-runner:gitlab-runner $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src/
#    - mkdir -p coverage
#    - lcov --capture --directory $CI_PROJECT_DIR/build/test/CMakeFiles/test_all_unit.dir/__/src --output-file coverage/coverage.info
#    - genhtml coverage/coverage.info --output-directory coverage
#  dependencies:
#    - build:alltests_quick
#  artifacts:
#    paths:
#      - $CI_PROJECT_DIR/build/test/coverage
#    reports:
#      junit: $CI_PROJECT_DIR/build/test/report.xml
#  after_script:
#    - sudo chown -R gitlab-runner:gitlab-runner $CI_PROJECT_DIR/build